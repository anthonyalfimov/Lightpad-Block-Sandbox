/*
<metadata   description="Festive Christmas Tree for your Lightpad Block"
            details="Tap the block anywhere except for the Star to make it snow!
                     Tap again to melt the snow away. Tap the Star to see it
                     shine! The Mode button controls blinking of the lights."
            target="Lightpad"
            tags="Fun" canEmbedModes="false">
    <variables>
        <variable name="channel" displayName="MIDI Channel"
                  type="int" min="1" max="16" value="1" displayMode="stepper"
                  tooltip="The MIDI channel that the note is sent on" />
        <variable name="note" displayName="Note"
                  type="midiNote" value="C3" initStart="60"
                  tooltip="The note that will be sent when hitting the Star" />

        <vector count="8" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable   name="SnowY"
                        type="float"
                        min="-15.0"
                        max="15.0"
                        value="0.0"
                        visible="false" />
        </vector>

        <vector count="8" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable   name="SnowY0"
                        type="float"
                        min="-15.0"
                        max="15.0"
                        value="-1.0"
                        visible="false" />
        </vector>

        <vector count="8" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable   name="SnowX0"
                        type="float"
                        min="-1.0"
                        max="15.0"
                        value="0.0"
                        visible="false" />
        </vector>

        <vector count="8" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable   name="SnowPh"
                        type="int"
                        min="0"
                        max="200"
                        value="0"
                        visible="false" />
        </vector>
    </variables>
</metadata>
*/

//==============================================================================
//  Global State Variables
//==============================================================================
bool isBlinking;        // ligths blinking / always on
bool isMagic;           // starshine animation playing / not playing
bool isSnowing;         // snowing / not snowing

//==============================================================================
//  Drawing Functions
//==============================================================================

//==== Background ==============================================================

void drawBG()
{
    for (int i = 0; i < 5; i++)
    {
        blendRect(makeARGB(25 - 5 * i, 0, 0, 255),
                  i,      0, 1, 15);
        blendRect(makeARGB(25 - 5 * i, 0, 0, 255),
                  14 - i, 0, 1, 15);
    }
}

//==== Snow ====================================================================

//======== SnowFall ============================================================

// SnowFall Constants
const float snowRate   = 0.07;      // rate of snowfall                | d: 0.07
const float snowSize   = 0.01;      // snowflake size                  | d: 0.01
const int   snowPeriod = 20;        // period of sideways oscillations | d: 20

// SnowFall Alpha Constants
const int snowAlphaFG = 0xFF;
const int snowAlphaBG = 0x18;

// SnowFall Fade-out Constants
const int maxSnowFallFrames = snowAlphaFG;
const int snowFallFadeRateFast = 16;
const int snowFallFadeRateSlow = 4;
const int snowFallFadeThresh = 0x40;   // threshold for switch from fast to slow

// SnowFall Global Colour Variables
int snowColourFG;
int snowColourBG;

// SnowFall Global Fade-out Variables
int snowFallFrames;

void initSnowFall()
{
    // Snowflake initial positions

    // Foreground
    // left
    setSnowX0(0,  0.5);
    setSnowY0(0, -1.0);
    setSnowPh(0,  20);
    // left
    setSnowX0(1,  3.0);
    setSnowY0(1, -8.0);
    setSnowPh(1,  110);
    // right
    setSnowX0(2,  12.0);
    setSnowY0(2, -3.5);
    setSnowPh(2,  0);
    // right
    setSnowX0(3,  11.0);
    setSnowY0(3, -12.0);
    setSnowPh(3,  90);

    // Background

    // left
    setSnowX0(4,  0.0);
    setSnowY0(4, -5.0);
    setSnowPh(4,  180);
    // left
    setSnowX0(5,  1.5);
    setSnowY0(5, -12.5);
    setSnowPh(5,  130);
    // right
    setSnowX0(6,  13.0);
    setSnowY0(6, -9.0);
    setSnowPh(6,  150);
    // right
    setSnowX0(7,  10.0);
    setSnowY0(7,  0.0);
    setSnowPh(7,  50);

    isSnowing = false;
}

void resetSnowFall()
{
    // Temporary snowflake coordinate variable
    float snowY;

    // Reset Snowflake Positions
    for (int i = 0; i < 8; i++)
    {
        snowY = getSnowY0(i);
        setSnowY(i, snowY);
    }

    // Reset Snowflake colours
    snowColourFG = makeARGB(snowAlphaFG, 255, 255, 255);
    snowColourBG = makeARGB(snowAlphaBG, 255, 255, 255);
}

// returns float offset in [0, 1], takes in phase shift
float snowFallOffset(int phase)
{
    return abs( (getMillisecondCounter() / snowPeriod + phase) % 201 - 100 ) / 100.0;
}

void drawSnowFall(int argb, int start, int end)
{
    // Temporary snowflake coordinate variables
    float snowX, snowY;
    int   snowPh;

    for (int i = start; i < end; i++)
    {
        snowPh = getSnowPh(i);
        snowX  = getSnowX0(i) + 2.0 * snowFallOffset(snowPh);
        snowY  = getSnowY(i);

        // Draw snowflake
        blendCircle(argb, snowX, snowY, snowSize, true);

        // Update snowflake position
        snowY += snowRate;
        if (snowY > 15.06)
            setSnowY(i, 0.0);
        else
            setSnowY(i, snowY);
    }
}

//======== Snow Accumulation ===================================================

// Snow Constants
// > Rates
const float snowPileRate = 0.1;
const float snowMeltRate = 0.5;

// > Snow Layer Parameters
const int snowAlphaL0 =  0x60;
const int snowDelayL0 = -0x14;

const int snowAlphaL1 =  0x40;
const int snowDelayL1 = -0x1B;

const int snowAlphaL2 =  0x18;
const int snowDelayL2 = -0x28;

const int snowAlphaL3 =  0x08;
const int snowDelayL3 = -0x38;

// Snow Animation Global Variables
float snowFrames;
int maxSnowFrames;

void initSnow()
{
    snowFrames = 0.0;

    // Set to the max required duration based on target alphas and offsets
    maxSnowFrames = max(
        max(
            (snowAlphaL0 - snowDelayL0),
            (snowAlphaL1 - snowDelayL1)
        ),
        max(
            (snowAlphaL2 - snowDelayL2),
            (snowAlphaL3 - snowDelayL3)
        )
    );
}

void drawSnow(int cx, int y)
{
    // Update snow colours
    int snowColourL0 = makeARGB(
        clamp(0, snowAlphaL0, int(snowFrames) + snowDelayL0),
        255, 255, 255
    );

    int snowColourL1 = makeARGB(
        clamp(0, snowAlphaL1, int(snowFrames) + snowDelayL1),
        255, 255, 255
    );

    int snowColourL2 = makeARGB(
        clamp(0, snowAlphaL2, int(snowFrames) + snowDelayL2),
        255, 255, 255
    );

    int snowColourL3 = makeARGB(
        clamp(0, snowAlphaL3, int(snowFrames) + snowDelayL3),
        255, 255, 255
    );


    blendPixel(snowColourL3, cx - 2, y + 1);
    blendPixel(snowColourL3, cx + 2, y + 1);

    blendPixel(snowColourL1, cx - 2, y + 3);

    blendPixel(snowColourL1, cx - 3, y + 4);
    blendPixel(snowColourL2, cx + 3, y + 4);

    blendPixel(snowColourL1, cx + 3, y + 6);

    blendPixel(snowColourL2, cx - 4, y + 7);
    blendPixel(snowColourL1, cx + 4, y + 7);

    blendPixel(snowColourL1, cx - 4, y + 9);

    blendPixel(snowColourL1, cx - 5, y + 10);
    blendPixel(snowColourL2, cx + 5, y + 10);

    // Left Pile

    blendPixel(snowColourL1, 0, 13);
    blendPixel(snowColourL0, 0, 14);
    blendPixel(snowColourL1, 1, 14);

    blendPixel(snowColourL2, 0, 12);
    blendPixel(snowColourL2, 1, 13);
    blendPixel(snowColourL3, 2, 14);

    // Right Pile

    blendPixel(snowColourL1, 14, 13);
    blendPixel(snowColourL0, 14, 14);
    blendPixel(snowColourL1, 13, 14);

    blendPixel(snowColourL3, 12, 14);
    blendPixel(snowColourL2, 13, 13);
    blendPixel(snowColourL2, 14, 12);
}

//======== General Snow Functions ==============================================

void updateSnow()
{
    if (isSnowing)
    {
        // Update Snow Accumulation Parameters
        if (snowFrames < maxSnowFrames)
            snowFrames += snowPileRate;
    }
    else
    {
        // Update Snow Accumulation Parameters
        if (snowFrames > 0.0)
            snowFrames -= snowMeltRate;

        // Update SnowFall Fade-out Parameters
        if (snowFallFrames > 0)
        {
            if (snowFallFrames > snowFallFadeThresh)
                snowFallFrames -= snowFallFadeRateFast;
            else
                snowFallFrames -= snowFallFadeRateSlow;

            snowColourFG = makeARGB(
                clamp(0, snowAlphaFG, snowFallFrames),
                255, 255, 255
            );

            snowColourBG = makeARGB(
                clamp(0, snowAlphaBG, snowFallFrames),
                255, 255, 255
            );
        }
    }
}

//==== Tinsel ==================================================================

void drawTinselLine(int x, int y, int length)
{
    for (int i = 0; i < length; i++)
        blendPixel(makeARGB(40 + getRandomInt(60), 255, 255, 0),
                   x + i, y + i);
}

void drawTinsel(int cx, int y)
{
    drawTinselLine(cx - 1, y + 2, 4);
    drawTinselLine(cx - 2, y + 5, 7);
    drawTinselLine(cx - 3, y + 8, 4);
}

//==== Lights ==================================================================

// Lights Colour Constants
const int lightsColour = 0xFF00FFFF;

void drawLightsLine(int x, int y, int num)
{
    for (int i = 0; i < num; i++)
        //blendPixel(lightsColour, x + 2 * i, y + 2 * i);
        blendCircle(lightsColour, x + 2.0 * i, y + 2.0 * i, 0.01, true);
}

void drawLights(int cx, int y)
{
    if (!isBlinking || (getMillisecondCounter() / 500 % 2 == 0))
    {
        drawLightsLine(cx - 1, y + 3, 2);
        drawLightsLine(cx - 2, y + 6, 3);
        drawLightsLine(cx - 3, y + 9, 2);
    }
}

//==== Baubles =================================================================

// Bauble Colour Constants
const int baubleColour = 0xFFFF0000;

void drawBaubles(int cx, int y)
{
    blendPixel(baubleColour, cx + 1, y +  3);
    blendPixel(baubleColour, cx - 1, y +  5);
    blendPixel(baubleColour, cx + 2, y +  8);
    blendPixel(baubleColour, cx - 2, y + 10);
}

//==== Star ====================================================================

// Star Colour & glow Constants
const int glowPeriod = 12;  // period of glow pulse (x 256 ms)

void drawStar(int cx, int y)
{
    // Glow pulse rate
    // Triangle wave with values in [0 - 128]
    int glowValue = abs((getMillisecondCounter() / glowPeriod) % 257 - 128);

    // Draw centre of the Star
    blendPixel(0xFFFFFFFF, cx,     y - 1);

    // Draw the Star
    int starColour = makeARGB(200 + glowValue * 55 / 128, 255, 220, 0);

    blendPixel(starColour, cx,     y - 2);
    blendPixel(starColour, cx - 1, y - 1);
    blendPixel(starColour, cx + 1, y - 1);

    // Draw tree illumination
    int illumColour = makeARGB(60 + glowValue * 32 / 128, 255, 255, 0);

    blendPixel(illumColour, cx,     y);

    // Draw primary Glow
    int glowColour1 = makeARGB(8 + glowValue * 24 / 128, 255, 255, 0);

    blendPixel(glowColour1, cx - 1, y - 2);
    blendPixel(glowColour1, cx + 1, y - 2);

    blendPixel(glowColour1, cx - 1, y);
    blendPixel(glowColour1, cx + 1, y);

    blendPixel(glowColour1, cx - 2, y - 1);
    blendPixel(glowColour1, cx + 2, y - 1);

    // Draw secondary Glow
    int glowColour2 = makeARGB(glowValue * 6 / 128, 255, 200, 0 );

    blendPixel(glowColour2, cx - 2, y - 2);
    blendPixel(glowColour2, cx + 2, y - 2);

    blendPixel(glowColour2, cx - 2, y);
    blendPixel(glowColour2, cx + 2, y);

    blendPixel(glowColour2, cx - 3, y - 1);
    blendPixel(glowColour2, cx + 3, y - 1);
}

//==== Tree ====================================================================

/**
    rgb    - colour to use
    cx     - x coordinate of the segment centre
    y      - y coordinate of the top of the segment
    levels - number of steps to draw below the triangular top
*/
void drawTreeSegment(int rgb, int cx, int y, int levels)
{
    // Draw the triangular top
    fillPixel(rgb, cx, y);
    fillRect(rgb, cx - 1, y + 1, 3, 1);

    // Draw the steps
    for (int i = 0; i < levels; i++)
    {
        fillRect(rgb, cx - 2 - i, y + 2 + i, 2, 1);
        fillRect(rgb, cx + 1 + i, y + 2 + i, 2, 1);
    }
}

// Tree Colour Constants
const int treeColourMain   = 0x00FF00;
const int treeColourAccent = 0x003000;  //0x002000 - 0x004000
/**
    cx - x coordinate of the tree centre
    y  - y coordinate of the top of the tree
*/
void drawTree(int cx, int y)
{
    // Draw Tree
    drawTreeSegment(treeColourMain,   cx, y,      1);
    drawTreeSegment(treeColourAccent, cx, y + 2,  2);
    drawTreeSegment(treeColourMain,   cx, y + 4,  3);
    drawTreeSegment(treeColourAccent, cx, y + 6,  4);
    drawTreeSegment(treeColourMain,   cx, y + 8,  3);
    drawTreeSegment(treeColourAccent, cx, y + 10, 0);

    fillPixel(0x211200, cx,     y + 12);
    fillPixel(0x151000, cx + 1, y + 12);
    fillPixel(0x151000, cx - 1, y + 12);

    // Draw Dependent Elements
    drawTinsel(cx, y);
    drawBaubles(cx, y);
    if (snowFrames > 0)
        drawSnow(cx, y);
    drawLights(cx, y);
    drawStar(cx, y);
    if (isMagic)
        drawMagic(cx, y);
}

//==== Magic Ring ==============================================================

// Magic Ring Constants
const int ringColour = 0xA0FFFF00;
const float maxRingRadius = 15.0;       // reset animation after reaching this
const float ringRate = 0.7;             // rate of ring animation

// Magic Ring Global Variable
float ringRadius;

// Star location constraints
const float maxY = 1.9 * 3  / 14;
const float minX = 1.9 * 6  / 14;
const float maxX = 1.9 * 10 / 14;

// Initialiser
void initMagicRing()
{
    isMagic = false;
    ringRadius = 0;
}

void drawMagic(int cx, int y)
{
    blendCircle(ringColour, float(cx), float(y - 1), ringRadius, false);
    ringRadius += ringRate;
    if (ringRadius > maxRingRadius)
    {
        ringRadius = 0;
        isMagic = false;
    }
}

//==============================================================================
//  MIDI Functions
//==============================================================================

// Touch index associated with the Star
int starIndex;      // 0 if no touch is associated with the Star

//==============================================================================
//  Initialization
//==============================================================================

void initialise()
{
    // Lights
    isBlinking = true;

    // Magic Ring
    initMagicRing();

    // SnowFall
    initSnowFall();
    resetSnowFall();

    // Snow Accumulation
    initSnow();

    // Disable Local Configs as long as we don't use them
    for (int i = 0; i < 32; ++i)
        setLocalConfigActiveState (i, false, false);
}

//==============================================================================
//  Repaint
//==============================================================================

void repaint()
{
    clearDisplay();
    drawBG();
    updateSnow();
    if (snowFallFrames > 0) drawSnowFall(snowColourBG, 4, 8);
    drawTree(7, 2);
    if (snowFallFrames > 0) drawSnowFall(snowColourFG, 0, 4);
    //log(getTimeInCurrentFunctionCall());
}

//==============================================================================
//  Event Handlers
//==============================================================================

//==== Button ==================================================================

void handleButtonDown (int index)
{
    isBlinking = !isBlinking;
}

//==== Touch ===================================================================

void touchStart (int index, float x, float y, float z, float vz)
{
    // If the Star is touched, send MIDI note and play Magic Ring animation
    if ( y < maxY && x > minX && x < maxX )
    {
        // Send MIDI note
        int velocity = clamp(1, 127, int(vz * 127.0));
        sendNoteOn((channel - 1), note, velocity);
        starIndex = index;

        // Start animation
        isMagic = true;
        ringRadius = 0;     // reset the ring on consequent touches
    }
    // If it is Snowing, stop
    else if (isSnowing)
    {
        isSnowing = false;
    }
    // If it isn't snowing, reset snowflake positions and fade-out animation
    else
    {
        resetSnowFall();
        snowFallFrames = maxSnowFallFrames;
        isSnowing = true;
    }
}

void touchEnd (int index, float x, float y, float z, float vz)
{
    if (index == starIndex)
    {
        int velocity = clamp(0, 127, int(vz * 127.0));
        sendNoteOff((channel - 1), note, velocity);
        starIndex = 0;      // reset the touch index associated with the Star
    }
}

/*
<display backgroundColour="0xFF00003A" textColour ="0xFFFFC800">
    <pixels>
        <pixel index="3" colour="0xFF00FF00" />
        <pixel index="4" colour="0xFF00FF00" />
        <pixel index="6" colour="0xFF301D00" />
        <pixel index="7" colour="0xFF4E2F01" />
        <pixel index="8" colour="0xFF301D00" />
        <pixel index="10" colour="0xFF00FF00" />
        <pixel index="11" colour="0xFF00FF00" />
        <pixel index="17" colour="0xFF00A000" />
        <pixel index="18" colour="0xFF00A000" />
        <pixel index="19" colour="0xFF00FF00" />
        <pixel index="20" colour="0xFF00FF00" />
        <pixel index="21" colour="0xFF00FFFF" />
        <pixel index="22" colour="0xFFFFFF00" />
        <pixel index="23" colour="0xFF00A000" />
        <pixel index="24" colour="0xFF00FF00" />
        <pixel index="25" colour="0xFF00FF00" />
        <pixel index="26" colour="0xFFFFFF00" />
        <pixel index="27" colour="0xFF00A000" />
        <pixel index="33" colour="0xFF00A000" />
        <pixel index="34" colour="0xFF00A000" />
        <pixel index="35" colour="0xFFFF0000" />
        <pixel index="36" colour="0xFFFFFF00" />
        <pixel index="37" colour="0xFF00A000" />
        <pixel index="38" colour="0xFF00FF00" />
        <pixel index="39" colour="0xFF00FFFF" />
        <pixel index="40" colour="0xFFFFFF00" />
        <pixel index="41" colour="0xFF00A000" />
        <pixel index="49" colour="0xFF00FFFF" />
        <pixel index="50" colour="0xFFFFFF00" />
        <pixel index="51" colour="0xFF00FF00" />
        <pixel index="52" colour="0xFF00FF00" />
        <pixel index="53" colour="0xFF00FF00" />
        <pixel index="54" colour="0xFFFFFF00" />
        <pixel index="55" colour="0xFF00A000" />
        <pixel index="63" colour="0xFF00FF00" />
        <pixel index="64" colour="0xFFFFFF00" />
        <pixel index="65" colour="0xFF00A000" />
        <pixel index="66" colour="0xFF00A000" />
        <pixel index="67" colour="0xFF00FFFF" />
        <pixel index="68" colour="0xFFFFFF00" />
        <pixel index="69" colour="0xFFFF0000" />
        <pixel index="70" colour="0xFF00FF00" />
        <pixel index="71" colour="0xFF00FF00" />
        <pixel index="79" colour="0xFF00FF00" />
        <pixel index="80" colour="0xFF00FF00" />
        <pixel index="81" colour="0xFF00A000" />
        <pixel index="82" colour="0xFFFFFF00" />
        <pixel index="83" colour="0xFF00A000" />
        <pixel index="84" colour="0xFF00FF00" />
        <pixel index="85" colour="0xFF00FF00" />
        <pixel index="95" colour="0xFF00FFFF" />
        <pixel index="96" colour="0xFFFFFF00" />
        <pixel index="97" colour="0xFF00A000" />
        <pixel index="98" colour="0xFF00FF00" />
        <pixel index="99" colour="0xFF00FF00" />
        <pixel index="109" colour="0xFF00A000" />
        <pixel index="110" colour="0xFFFFFF00" />
        <pixel index="111" colour="0xFFFF0000" />
        <pixel index="112" colour="0xFF00FF00" />
        <pixel index="113" colour="0xFF00FFFF" />
        <pixel index="114" colour="0xFFFFFF00" />
        <pixel index="115" colour="0xFF00A000" />
        <pixel index="125" colour="0xFF00A000" />
        <pixel index="126" colour="0xFF00A000" />
        <pixel index="127" colour="0xFF00FF00" />
        <pixel index="128" colour="0xFFFFFF00" />
        <pixel index="129" colour="0xFF00A000" />
        <pixel index="141" colour="0xFF00FFFF" />
        <pixel index="142" colour="0xFFFFFF00" />
        <pixel index="143" colour="0xFFFF0000" />
        <pixel index="155" colour="0xFF00FF00" />
        <pixel index="156" colour="0xFFFFFF00" />
        <pixel index="157" colour="0xFF00A000" />
        <pixel index="158" colour="0xFF00FF00" />
        <pixel index="159" colour="0xFF00FF00" />
        <pixel index="171" colour="0xFF00FF00" />
        <pixel index="172" colour="0xFF00FF00" />
        <pixel index="173" colour="0xFF00FF00" />
        <pixel index="185" colour="0x10FFC800" />
        <pixel index="186" colour="0x70FFC800" />
        <pixel index="187" colour="0xFF10FB00" />
        <pixel index="188" colour="0x70FFC800" />
        <pixel index="189" colour="0x10FFC800" />
        <pixel index="199" colour="0x10FFC800" />
        <pixel index="200" colour="0x70FFC800" />
        <pixel index="201" colour="0xFFFFC800" />
        <pixel index="202" colour="0xFFFFFFFF" />
        <pixel index="203" colour="0xFFFFC800" />
        <pixel index="204" colour="0x70FFC800" />
        <pixel index="205" colour="0x10FFC800" />
        <pixel index="215" colour="0x10FFC800" />
        <pixel index="216" colour="0x70FFC800" />
        <pixel index="217" colour="0xFFFFC800" />
        <pixel index="218" colour="0x70FFC800" />
        <pixel index="219" colour="0x10FFC800" />
    </pixels>
</display>
*/
