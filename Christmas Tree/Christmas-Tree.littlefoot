/*
<metadata   description="Festive Christmas Tree for your Lightpad Block!"
            target="Lightpad"
            tags="Fun;">
    <variables>
        <vector count="8" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable   name="SnowY"
                        type="float"
                        min="-15.0"
                        max="15.0"
                        value="0.0"
                        visible="false" />
        </vector>

        <vector count="8" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable   name="SnowY0"
                        type="float"
                        min="-15.0"
                        max="15.0"
                        value="-1.0"
                        visible="false" />
        </vector>

        <vector count="8" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable   name="SnowX0"
                        type="float"
                        min="-1.0"
                        max="15.0"
                        value="0.0"
                        visible="false" />
        </vector>

        <vector count="8" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable   name="SnowPh"
                        type="int"
                        min="0"
                        max="200"
                        value="0"
                        visible="false" />
        </vector>
    </variables>
</metadata>
*/

//==============================================================================
//  Global State Variables
//==============================================================================
bool isBlinking;        // Lights blinking or always on
bool isMagic;           // Magic is happenning or not
bool isSnowing;

//==============================================================================
//  Drawing Functions
//==============================================================================

//==== Background ==============================================================

void drawBG()
{
    // Simple programmatical BG without "shimmer"

    for (int i = 0; i < 5; i++)
    {
        blendRect(makeARGB(25 - 5 * i, 0, 0, 255),
                  i,      0, 1, 15);
        blendRect(makeARGB(25 - 5 * i, 0, 0, 255),
                  14 - i, 0, 1, 15);
    }
}

//==== Snow ====================================================================

// SnowFall Constants
const float snowRate   = 0.07;      // default 0.07
const float snowSize   = 0.01;      // default 0.01
const int   snowPeriod = 20;        // default 20

// SnowFall Colour Constants
const int snowColourFG = 0xFFFFFFFF;
const int snowColourMG = 0x40FFFFFF;
const int snowColourBG = 0x18FFFFFF;

const int snowColourBBG = 0x08FFFFFF;

// Temporary snowflake coordinate variables
float snowX, snowY;
int   snowPh;

void initSnowFall()
{
    // Snowflake initial positions
    
    // Foreground
    // left
    setSnowX0(0,  0.5);
    setSnowY0(0, -1.0);
    setSnowPh(0,  20);
    // left
    setSnowX0(1,  3.0);
    setSnowY0(1, -8.0);
    setSnowPh(1,  110);
    // right
    setSnowX0(2,  12.0);
    setSnowY0(2, -3.5);
    setSnowPh(2,  0);
    // right
    setSnowX0(3,  11.0);
    setSnowY0(3, -12.0);
    setSnowPh(3,  90);

    // Background
    
    // left
    setSnowX0(4,  0.0);
    setSnowY0(4, -5.0);
    setSnowPh(4,  180);
    // left
    setSnowX0(5,  1.5);
    setSnowY0(5, -12.5);
    setSnowPh(5,  130);
    // right
    setSnowX0(6,  13.0);
    setSnowY0(6, -9.0);
    setSnowPh(6,  150);
    // right
    setSnowX0(7,  10.0);
    setSnowY0(7,  0.0);
    setSnowPh(7,  50);
    

    isSnowing = false; // should be false
}

void resetSnowFall()
{
    for (int i = 0; i < 8; i++)
    {
        snowY = getSnowY0(i);
        setSnowY(i, snowY);
    }
}

// returns float offset in [0, 1], takes in phase shift
float snowOffset(int phase)
{
    return abs( (getMillisecondCounter() / snowPeriod + phase) % 201 - 100 ) / 100.0;
}

void drawSnowFall(int argb, int start, int end)
{
    for (int i = start; i < end; i++)
    {
        snowPh = getSnowPh(i);
        snowX  = getSnowX0(i) + 2.0 * snowOffset(snowPh);
        snowY  = getSnowY(i);

        // Draw snowflake
        blendCircle(argb, snowX, snowY, snowSize, true);

        // Update snowflake position
        snowY += snowRate;
        if (snowY > 15.06)
            setSnowY(i, 0.0);
        else
            setSnowY(i, snowY);
    }
}

void drawSnow(int cx, int y)
{
    blendPixel(snowColourBBG, cx - 2, y + 1);
    blendPixel(snowColourBBG, cx + 2, y + 1);
    
    blendPixel(snowColourMG, cx - 2, y + 3);
    
    blendPixel(snowColourMG, cx - 3, y + 4);
    blendPixel(snowColourBG, cx + 3, y + 4);
    
    blendPixel(snowColourMG, cx + 3, y + 6);
    
    blendPixel(snowColourBG, cx - 4, y + 7);
    blendPixel(snowColourMG, cx + 4, y + 7);
    
    blendPixel(snowColourMG, cx - 4, y + 9);
    
    blendPixel(snowColourMG, cx - 5, y + 10);
    blendPixel(snowColourBG, cx + 5, y + 10);
    
    // Left Pile
    
    blendPixel(snowColourMG, 0, 13);
    blendPixel(snowColourFG, 0, 14);
    blendPixel(snowColourMG, 1, 14);
    
    blendPixel(snowColourBG, 0, 12);
    blendPixel(snowColourBG, 1, 13);
    blendPixel(snowColourBBG, 2, 14);
    
    // Righ Pile
    
    blendPixel(snowColourMG, 14, 13);
    blendPixel(snowColourFG, 14, 14);
    blendPixel(snowColourMG, 13, 14);
    
    blendPixel(snowColourBBG, 12, 14);
    blendPixel(snowColourBG, 13, 13);
    blendPixel(snowColourBG, 14, 12);
}

//==== Tinsel ==================================================================

void drawTinselLine(int x, int y, int length)
{
    for (int i = 0; i < length; i++)
        blendPixel(makeARGB(40 + getRandomInt(60), 255, 255, 0),
                   x + i, y + i);
}

void drawTinsel(int cx, int y)
{
    drawTinselLine(cx - 1, y + 2, 4);
    drawTinselLine(cx - 2, y + 5, 7);
    drawTinselLine(cx - 3, y + 8, 4);
}

//==== Lights ==================================================================

// Lights Colour Constants
const int lightsColour = 0xFF00FFFF;

void drawLightsLine(int x, int y, int num)
{
    for (int i = 0; i < num; i++)
        //blendPixel(lightsColour, x + 2 * i, y + 2 * i);
        blendCircle(lightsColour, x + 2.0 * i, y + 2.0 * i, 0.01, true);
}

void drawLights(int cx, int y)
{
    if (!isBlinking || (getMillisecondCounter() / 500 % 2 == 0))
    {
        drawLightsLine(cx - 1, y + 3, 2);
        drawLightsLine(cx - 2, y + 6, 3);
        drawLightsLine(cx - 3, y + 9, 2);
    }
}

//==== Baubles =================================================================

// Bauble Colour Constants
const int baubleColour = 0xFFFF0000;

void drawBaubles(int cx, int y)
{
    blendPixel(baubleColour, cx + 1, y +  3);
    blendPixel(baubleColour, cx - 1, y +  5);
    blendPixel(baubleColour, cx + 2, y +  8);
    blendPixel(baubleColour, cx - 2, y + 10);
}

//==== Star ====================================================================

// Star Colour & glow Variables
int starColour;             // colour of the star
int illumColour;            // colour of tree illuminated by the star
int glowColour1;            // primary glow colour
int glowColour2;            // secondaty glow colour
int glowValue;              // source of glow pulse

// Star Colour & glow Constants
const int glowPeriod = 12;  // period of glow pulse (x 256 ms)

void drawStar(int cx, int y)
{
    // Glow pulse rate
    // Triangle wave with values in [0 - 128]
    glowValue = abs((getMillisecondCounter() / glowPeriod) % 257 - 128);

    // Centre
    blendPixel(0xFFFFFFFF, cx,     y - 1);

    // Star
    starColour = makeARGB(200 + glowValue * 55 / 128, 255, 220, 0);

    blendPixel(starColour, cx,     y - 2);
    blendPixel(starColour, cx - 1, y - 1);
    blendPixel(starColour, cx + 1, y - 1);

    // Tree illumination
    illumColour = makeARGB(60 + glowValue * 32 / 128, 255, 255, 0);

    blendPixel(illumColour, cx,     y);

    // Primary Glow
    glowColour1 = makeARGB(8 + glowValue * 24 / 128, 255, 255, 0);

    blendPixel(glowColour1, cx - 1, y - 2);
    blendPixel(glowColour1, cx + 1, y - 2);

    blendPixel(glowColour1, cx - 1, y);
    blendPixel(glowColour1, cx + 1, y);

    blendPixel(glowColour1, cx - 2, y - 1);
    blendPixel(glowColour1, cx + 2, y - 1);

    // Secondary Glow
    glowColour2 = makeARGB(glowValue * 6 / 128, 255, 200, 0 );

    blendPixel(glowColour2, cx - 2, y - 2);
    blendPixel(glowColour2, cx + 2, y - 2);

    blendPixel(glowColour2, cx - 2, y);
    blendPixel(glowColour2, cx + 2, y);

    blendPixel(glowColour2, cx - 3, y - 1);
    blendPixel(glowColour2, cx + 3, y - 1);
}

//==== Tree ====================================================================

/**
@param rgb    colour to use
@param cx     x coordinate of the segment centre
@param y      y coordinate of the top of the segment
@param levels number of steps to draw below the triangular top
*/
void drawTreeSegment(int rgb, int cx, int y, int levels)
{
    // Draw the triangular top
    fillPixel(rgb, cx, y);
    fillRect(rgb, cx - 1, y + 1, 3, 1);

    // Draw the steps
    for (int i = 0; i < levels; i++)
    {
        fillRect(rgb, cx - 2 - i, y + 2 + i, 2, 1);
        fillRect(rgb, cx + 1 + i, y + 2 + i, 2, 1);
    }
}

// Tree Colour Constants
const int treeColourMain   = 0x00FF00;
const int treeColourAccent = 0x004000;
/**
@param cx     x coordinate of the tree centre
@param y      y coordinate of the top of the tree
*/
void drawTree(int cx, int y)
{
    drawTreeSegment(treeColourMain,   cx, y,      1);
    drawTreeSegment(treeColourAccent, cx, y + 2,  2);
    drawTreeSegment(treeColourMain,   cx, y + 4,  3);
    drawTreeSegment(treeColourAccent, cx, y + 6,  4);
    drawTreeSegment(treeColourMain,   cx, y + 8,  3);
    drawTreeSegment(treeColourAccent, cx, y + 10, 0);

    fillPixel(0x211200, cx,     y + 12);
    fillPixel(0x151000, cx + 1, y + 12);
    fillPixel(0x151000, cx - 1, y + 12);

    drawTinsel(cx, y);
    drawBaubles(cx, y);
    if (isSnowing) drawSnow(cx, y);
    drawLights(cx, y);
    drawStar(cx, y);

    if (isMagic)
        drawMagic(cx, y);
}

//==== Magic Ring ==============================================================

// Magic Ring Constants
const int ringColour = 0xA0FFFF00;
const float maxRingRadius = 15.0;       // reset animation after reaching this
const float ringRate = 0.7;             // rate of ring animation

// Magic Ring Variables
float ringRadius;

// Star location constraints
const float maxY = 1.9 * 3  / 14;
const float minX = 1.9 * 6  / 14;
const float maxX = 1.9 * 10 / 14;

// Initialiser
void initMagicRing()
{
    isMagic = false;
    ringRadius = 0;

    // Star location constraints
    //maxY = 1.9 * 3  / 14;
    //minX = 1.9 * 6  / 14;
    //maxX = 1.9 * 10 / 14;
}

void drawMagic(int cx, int y)
{
    blendCircle(ringColour, float(cx), float(y - 1), ringRadius, false);
    ringRadius += ringRate;
    if (ringRadius > maxRingRadius)
    {
        ringRadius = 0;
        isMagic = false;
    }
}

//==============================================================================
//  Initialization
//==============================================================================

void initialise()
{
    // Lights
    isBlinking = true;

    // Magic Ring
    initMagicRing();

    // Snowfall
    initSnowFall();
    resetSnowFall();
}

//==============================================================================
//  Repaint
//==============================================================================

void repaint()
{
    clearDisplay();
    drawBG();
    if (isSnowing) drawSnowFall(snowColourBG, 4, 8);
    drawTree(7, 2);
    if (isSnowing) drawSnowFall(snowColourFG, 0, 4);
    //log(getTimeInCurrentFunctionCall());
}

//==============================================================================
//  Event Handlers
//==============================================================================

//==== Button ==================================================================

void handleButtonDown (int index)
{
    isBlinking = !isBlinking;
}

//==== Touch ===================================================================

void touchStart (int index, float x, float y, float z, float vz)
{
    if ( y < maxY && x > minX && x < maxX )
    {
        isMagic = true;
        ringRadius = 0;     // reset the ring on consequent touch
    }
    else
    {
        resetSnowFall();
        isSnowing = !isSnowing;
    }
}


/*
<display backgroundColour="0xFF83DD79" textColour ="0xFF000000">
    <pixels>
        <pixel index="3" colour="0xFF00FF00" />
        <pixel index="4" colour="0xFF00FF00" />
        <pixel index="6" colour="0xFF301D00" />
        <pixel index="7" colour="0xFF4E2F01" />
        <pixel index="8" colour="0xFF301D00" />
        <pixel index="10" colour="0xFF00FF00" />
        <pixel index="11" colour="0xFF00FF00" />
        <pixel index="17" colour="0xFF00A000" />
        <pixel index="18" colour="0xFF00A000" />
        <pixel index="19" colour="0xFF00FF00" />
        <pixel index="20" colour="0xFF00FF00" />
        <pixel index="21" colour="0xFF00FFFF" />
        <pixel index="22" colour="0xFFFFFF00" />
        <pixel index="23" colour="0xFF00A000" />
        <pixel index="24" colour="0xFF00FF00" />
        <pixel index="25" colour="0xFF00FF00" />
        <pixel index="26" colour="0xFFFFFF00" />
        <pixel index="27" colour="0xFF00A000" />
        <pixel index="33" colour="0xFF00A000" />
        <pixel index="34" colour="0xFF00A000" />
        <pixel index="35" colour="0xFFFF0000" />
        <pixel index="36" colour="0xFFFFFF00" />
        <pixel index="37" colour="0xFF00A000" />
        <pixel index="38" colour="0xFF00FF00" />
        <pixel index="39" colour="0xFF00FFFF" />
        <pixel index="40" colour="0xFFFFFF00" />
        <pixel index="41" colour="0xFF00A000" />
        <pixel index="49" colour="0xFF00FFFF" />
        <pixel index="50" colour="0xFFFFFF00" />
        <pixel index="51" colour="0xFF00FF00" />
        <pixel index="52" colour="0xFF00FF00" />
        <pixel index="53" colour="0xFF00FF00" />
        <pixel index="54" colour="0xFFFFFF00" />
        <pixel index="55" colour="0xFF00A000" />
        <pixel index="63" colour="0xFF00FF00" />
        <pixel index="64" colour="0xFFFFFF00" />
        <pixel index="65" colour="0xFF00A000" />
        <pixel index="66" colour="0xFF00A000" />
        <pixel index="67" colour="0xFF00FFFF" />
        <pixel index="68" colour="0xFFFFFF00" />
        <pixel index="69" colour="0xFFFF0000" />
        <pixel index="70" colour="0xFF00FF00" />
        <pixel index="71" colour="0xFF00FF00" />
        <pixel index="79" colour="0xFF00FF00" />
        <pixel index="80" colour="0xFF00FF00" />
        <pixel index="81" colour="0xFF00A000" />
        <pixel index="82" colour="0xFFFFFF00" />
        <pixel index="83" colour="0xFF00A000" />
        <pixel index="84" colour="0xFF00FF00" />
        <pixel index="85" colour="0xFF00FF00" />
        <pixel index="95" colour="0xFF00FFFF" />
        <pixel index="96" colour="0xFFFFFF00" />
        <pixel index="97" colour="0xFF00A000" />
        <pixel index="98" colour="0xFF00FF00" />
        <pixel index="99" colour="0xFF00FF00" />
        <pixel index="109" colour="0xFF00A000" />
        <pixel index="110" colour="0xFFFFFF00" />
        <pixel index="111" colour="0xFFFF0000" />
        <pixel index="112" colour="0xFF00FF00" />
        <pixel index="113" colour="0xFF00FFFF" />
        <pixel index="114" colour="0xFFFFFF00" />
        <pixel index="115" colour="0xFF00A000" />
        <pixel index="125" colour="0xFF00A000" />
        <pixel index="126" colour="0xFF00A000" />
        <pixel index="127" colour="0xFF00FF00" />
        <pixel index="128" colour="0xFFFFFF00" />
        <pixel index="129" colour="0xFF00A000" />
        <pixel index="141" colour="0xFF00FFFF" />
        <pixel index="142" colour="0xFFFFFF00" />
        <pixel index="143" colour="0xFFFF0000" />
        <pixel index="155" colour="0xFF00FF00" />
        <pixel index="156" colour="0xFFFFFF00" />
        <pixel index="157" colour="0xFF00A000" />
        <pixel index="158" colour="0xFF00FF00" />
        <pixel index="159" colour="0xFF00FF00" />
        <pixel index="171" colour="0xFF00FF00" />
        <pixel index="172" colour="0xFF00FF00" />
        <pixel index="173" colour="0xFF00FF00" />
        <pixel index="185" colour="0x10FFC800" />
        <pixel index="186" colour="0x70FFC800" />
        <pixel index="187" colour="0xFF10FB00" />
        <pixel index="188" colour="0x70FFC800" />
        <pixel index="189" colour="0x10FFC800" />
        <pixel index="199" colour="0x10FFC800" />
        <pixel index="200" colour="0x70FFC800" />
        <pixel index="201" colour="0xFFFFC800" />
        <pixel index="202" colour="0xFFFFFFFF" />
        <pixel index="203" colour="0xFFFFC800" />
        <pixel index="204" colour="0x70FFC800" />
        <pixel index="205" colour="0x10FFC800" />
        <pixel index="215" colour="0x10FFC800" />
        <pixel index="216" colour="0x70FFC800" />
        <pixel index="217" colour="0xFFFFC800" />
        <pixel index="218" colour="0x70FFC800" />
        <pixel index="219" colour="0x10FFC800" />
    </pixels>
</display>
*/
