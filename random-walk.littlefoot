/*
<metadata description="Random walking particle on your Lightpad Block!"
          details="Tap to start or stop the particle, press the side button to cycle through particle colour modes (Normal, Rainbow and Disco)."
          target="Lightpad">
    <variables>
        <variable name="normColour" displayName="Particle Colour"              type="colour"                     value="0xFFFFFF00" />
        <variable name="radius"     displayName="Particle Radius"              type="float"  min="0.0" max="2.5" value="0.2"        />
        <variable name="rate"       displayName="Particle Speed"               type="float"  min="0.5" max="3.0" value="1.75"       />
        <variable name="fade"       displayName="Trail Fade Rate"              type="int"    min="0"   max="10"  value="2"          />
        <variable name="boundary"   displayName="Boundary Conditions" type="option" options="Bounce;Periodic"    value="Bounce"     />
    </variables>
</metadata>
*/


//==============================================================================
//  Global Variables
//==============================================================================

// Position
float x;
float y;

// Bounce boundary
float maxCoord;

// State variables
bool isRunning;                     // is simulation running
int colourMode;                     // particle colour mode
//  colourMode == 0 - Normal mode
//  colourMode == 1 - Rainbow mode
//  colourMode == 2 - Disco mode

// Colour variables
int prtColour;                      // particle colour
int hue;                            // particle hue for Disco mode
int hueRate;                        // particle hue change rate for Disco mode


//==============================================================================
//  Initialization and repaint loop
//==============================================================================

void initialise()
{
    clearDisplay();
    
    maxCoord = 15.0 - radius;       // maximum allowed coordinate when particle bounces off the walls
    
    x = 7.0;
    y = 7.0;
    isRunning = false;
    
    hue = 0;
    hueRate = 4;
    colourMode = 0;                 // Begin in Normal colour mode
    prtColour = normColour;
}


//==============================================================================
//  Event handlers
//==============================================================================

void touchStart (int index, float x, float y, float z, float vz)
{
    isRunning = !isRunning;         // start or stop simulation
}


void handleButtonDown (int index)
{
    colourMode = (colourMode + 1) % 3;
}

//==============================================================================
//  Coordinate generation
//==============================================================================

// Coordinate update function for Periodic Boundary Conditions
float displacePeriodic(float var)
{
    var += (getRandomFloat() - 0.5) * 2 * rate;
    if (var < 0.0)
        var += 15.0;
    else if (var > 15.0)
        var -= 15.0;
        
    return var;
}

// Coordinate update function for Bounce Boundary Conditions
float displaceBounce(float var)
{
    var += (getRandomFloat() - 0.5) * 2 * rate;
    if (var < radius)
     // var = radius + (radius - var)
        var = 2 * radius - var;
    else if (var > maxCoord)
     // var = maxCoord - (var - maxCoord)
        var = 2 * maxCoord - var;
        
    return var;
}

//==============================================================================
//  Colour functions
//==============================================================================

// Integer HSV to RGB conversion (All-integer function)
// All parameters are assumed to be 8 bit (0 - 255)
int makeARGBfromAHSV(int alpha, int h, int s, int v)
{
    // If grayscale:
    if (s == 0)
        return makeARGB(alpha, v, v, v);

    int region     = h / 43;
    int remainder  = h - (region * 43);   // range 0 - 42

    int p, q, t;
    p = v * (255 - s) / 255;
    q = v * (255 - (s * remainder) / 43) / 255;
    t = v * (255 - (s * (43 - remainder)) / 43) / 255;

    if (region == 0)
        return makeARGB(alpha, v, t, p);
    else if (region == 1)
        return makeARGB(alpha, q, v, p);
    else if (region == 2)
        return makeARGB(alpha, p, v, t);
    else if (region == 3)
        return makeARGB(alpha, p, q, v);
    else if (region == 4)
        return makeARGB(alpha, t, p, v);
    else
        return makeARGB(alpha, v, p, q);
}

//==============================================================================
//  Repaint loop
//==============================================================================

void repaint()
{
// Clear display with fade:
    blendRect(makeARGB(fade * 10, 0, 0, 0), 0, 0, 15, 15);

// Draw particle:
    blendCircle(prtColour, x, y, radius, false);

    if (isRunning)
    {
    // Update coordinates:
    
        // Periodic Boundary Conditions:
        if (boundary == 1)
        {
            x = displacePeriodic(x);
            y = displacePeriodic(y);
        }
        // Bounce off the walls:
        else
        {
             x = displaceBounce(x);
             y = displaceBounce(y);   
        }

    // Update colour:
        if (colourMode == 1)
        {
            hue = (hue + hueRate) % 256;
            prtColour = makeARGBfromAHSV(255, hue, 255, 255);
        }
        else if (colourMode == 2)
            prtColour = makeARGBfromAHSV(255, 
                                         getRandomInt(256),
                                         255,
                                         255);
        else
            prtColour = normColour;
    }
}


/*
<display backgroundColour="0xFF333333" textColour ="0xFFFFE700">
    <pixels>
        <pixel index="66" colour="0xFFFFE700" />
        <pixel index="67" colour="0xFFFFE700" />
        <pixel index="68" colour="0xFFFFE700" />
        <pixel index="80" colour="0xFFFFE700" />
        <pixel index="81" colour="0xFFFFE700" />
        <pixel index="82" colour="0xFFFFE700" />
        <pixel index="83" colour="0xFFFFE700" />
        <pixel index="84" colour="0xFFFFE700" />
        <pixel index="94" colour="0xFFFFE700" />
        <pixel index="95" colour="0xFFFFE700" />
        <pixel index="96" colour="0xFFFFE700" />
        <pixel index="98" colour="0xFFFFE700" />
        <pixel index="99" colour="0xFFFFE700" />
        <pixel index="100" colour="0xFFFFE700" />
        <pixel index="109" colour="0xFFFFE700" />
        <pixel index="110" colour="0xFFFFE700" />
        <pixel index="114" colour="0xFFFFE700" />
        <pixel index="115" colour="0xFFFFE700" />
        <pixel index="124" colour="0xFFFFE700" />
        <pixel index="125" colour="0xFFFFE700" />
        <pixel index="126" colour="0xFFFFE700" />
        <pixel index="128" colour="0xFFFFE700" />
        <pixel index="129" colour="0xFFFFE700" />
        <pixel index="130" colour="0xFFFFE700" />
        <pixel index="140" colour="0xFFFFE700" />
        <pixel index="141" colour="0xFFFFE700" />
        <pixel index="142" colour="0xFFFFE700" />
        <pixel index="143" colour="0xFFFFE700" />
        <pixel index="144" colour="0xFFFFE700" />
        <pixel index="156" colour="0xFFFFE700" />
        <pixel index="157" colour="0xFFFFE700" />
        <pixel index="158" colour="0xFFFFE700" />
    </pixels>
</display>
*/