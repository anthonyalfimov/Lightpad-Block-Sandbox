/*
<metadata description="Random Walk (Float)"
          target="Lightpad">
    <variables>
        <variable name="prtColour"  displayName="Particle Colour"              type="colour"                     value="0xFFFFFF00" />
        <variable name="isDisco"    displayName="Disco Mode"                   type="bool"                       value="false"      />
        <variable name="radius"     displayName="Particle Radius"              type="float"  min="0.0" max="2.5" value="0.2"        />
        <variable name="rate"       displayName="Particle Speed"               type="float"  min="0.5" max="3.0" value="1.75"       />
        <variable name="fade"       displayName="Fade Rate"                    type="int"    min="0"   max="10"  value="2"          />
        <variable name="isPeriodic" displayName="Periodic Boundary Conditions" type="bool"                       value="true"      />
    </variables>
</metadata>
*/


//==============================================================================
//  Global Variables
//==============================================================================

// Position
float x;
float y;

// Particle size
//float radius;

// Bounce boundary
float maxCoord;

// State variables
bool isRunning;                     // is simulation running
bool isDisplay;                     // is display mode on


//==============================================================================
//  Initialization and repaint loop
//==============================================================================

void initialise()
{
    maxCoord = 15.0 - radius;       // maximum allowed coordinate when particle bounces off the walls
    
    x = 7.0;
    y = 7.0;
    isRunning = false;
    isDisplay = false;
}


//==============================================================================
//  Handlers
//==============================================================================

void touchStart (int index, float x, float y, float z, float vz)
{
    isRunning = !isRunning;
}


void handleButtonDown (int index)
{
    isDisplay = !isDisplay;
}

//==============================================================================
//  Coordinate generation
//==============================================================================

// Coordinate update function for Periodic Boundary Conditions
float displacePeriodic(float var)
{
    var += (getRandomFloat() - 0.5) * 2 * rate;
    if (var < 0.0)
        var += 15.0;
    else if (var > 15.0)
        var -= 15.0;
        
    return var;
}

// Coordinate update function for Bounce Boundary Conditions
float displaceBounce(float var)
{
    var += (getRandomFloat() - 0.5) * 2 * rate;
    if (var < radius)
     // var = radius + (radius - var)
        var = 2 * radius - var;
    else if (var > maxCoord)
     // var = maxCoord - (var - maxCoord)
        var = 2 * maxCoord - var;
        
    return var;
}

//==============================================================================
//  Repaint loop
//==============================================================================

void repaint()
{
// Clear display with fade:
    if (isDisplay)
    {
        drawNumber(int(x), 0xFF000000, 1, 1);
        drawNumber(int(y), 0xFF000000, 1, 9);
    }
    blendRect(makeARGB(fade * 10, 0, 0, 0), 0, 0, 15, 15);

// Draw particle:
    blendCircle(prtColour, x, y, radius, false);

// Update coordinates:
    if (isRunning)
    {
        // Periodic Boundary Conditions:
        if (isPeriodic)
        {
            x = displacePeriodic(x);
            y = displacePeriodic(y);
        }
        // Bounce off the walls:
        else
        {
             x = displaceBounce(x);
             y = displaceBounce(y);   
        }

        // Update colour:
        if (isDisco)
        {
            prtColour = makeARGB(255,
                                 getRandomInt(256),
                                 getRandomInt(256),
                                 getRandomInt(256)
                                );
        }
    }

// Print coordinates:
    if (isDisplay)
    {
        drawNumber(int(x), 0xFFFFFFFF, 1, 1);
        drawNumber(int(y), 0xFFFFFFFF, 1, 9);
    }
}



/*
<display backgroundColour="0xFF83DD79" textColour ="0xFF000000">
    <pixels>
        <pixel index="17" colour="0xFF2F2F00" />
        <pixel index="18" colour="0xFF313100" />
        <pixel index="19" colour="0xFF313100" />
        <pixel index="20" colour="0xFF313100" />
        <pixel index="21" colour="0xFF313100" />
        <pixel index="32" colour="0xFF2F2F00" />
        <pixel index="33" colour="0xFF313100" />
        <pixel index="34" colour="0xFF575701" />
        <pixel index="35" colour="0xFF727201" />
        <pixel index="36" colour="0xFF595900" />
        <pixel index="37" colour="0xFF454500" />
        <pixel index="49" colour="0xFF313100" />
        <pixel index="50" colour="0xFF595900" />
        <pixel index="51" colour="0xFF727201" />
        <pixel index="52" colour="0xFF595900" />
        <pixel index="53" colour="0xFF454500" />
        <pixel index="65" colour="0xFF454500" />
        <pixel index="66" colour="0xFF595900" />
        <pixel index="67" colour="0xFF727201" />
        <pixel index="68" colour="0xFF727201" />
        <pixel index="69" colour="0xFF5F5F00" />
        <pixel index="81" colour="0xFF595900" />
        <pixel index="82" colour="0xFF727201" />
        <pixel index="83" colour="0xFF727201" />
        <pixel index="84" colour="0xFF5F5F00" />
        <pixel index="95" colour="0xFF595900" />
        <pixel index="96" colour="0xFF454500" />
        <pixel index="97" colour="0xFF8C8C01" />
        <pixel index="98" colour="0xFF727201" />
        <pixel index="110" colour="0xFF454500" />
        <pixel index="111" colour="0xFF5F5F00" />
        <pixel index="112" colour="0xFF8C8C01" />
        <pixel index="113" colour="0xFF5F5F00" />
        <pixel index="114" colour="0xFF454500" />
        <pixel index="125" colour="0xFF454500" />
        <pixel index="126" colour="0xFF707000" />
        <pixel index="127" colour="0xFF8C8C01" />
        <pixel index="128" colour="0xFF8C8C01" />
        <pixel index="129" colour="0xFF5F5F00" />
        <pixel index="141" colour="0xFF5F5F00" />
        <pixel index="142" colour="0xFF707000" />
        <pixel index="143" colour="0xFF8C8C01" />
        <pixel index="144" colour="0xFF707000" />
        <pixel index="145" colour="0xFF5F5F00" />
        <pixel index="157" colour="0xFF5F5F00" />
        <pixel index="158" colour="0xFF707000" />
        <pixel index="159" colour="0xFF8C8C01" />
        <pixel index="160" colour="0xFF707000" />
        <pixel index="161" colour="0xFFA2A200" />
        <pixel index="173" colour="0xFF707000" />
        <pixel index="174" colour="0xFF707000" />
        <pixel index="175" colour="0xFFA2A200" />
        <pixel index="176" colour="0xFFFFFF00" />
        <pixel index="177" colour="0xFFA2A200" />
        <pixel index="189" colour="0xFFA2A200" />
        <pixel index="190" colour="0xFFFFFF00" />
        <pixel index="191" colour="0xFFFFFF00" />
        <pixel index="192" colour="0xFFFFFF00" />
        <pixel index="205" colour="0xFFA2A200" />
        <pixel index="206" colour="0xFFFFFF00" />
        <pixel index="207" colour="0xFF5F5F00" />
    </pixels>
</display>
*/