

// Integer HSV to RGB conversion (All-integer function)
// All parameters are assumed to be 8 bit (0 - 255)
int makeARGBfromAHSV(int alpha, int h, int s, int v)
{
    // If grayscale:
    if (s == 0)
        return makeARGB(alpha, v, v, v);

    int region     = h / 43;
    int remainder  = h - (region * 43);   // range 0 - 42

    int p, q, t;
    // Some ugly normalization happens here
    // TODO: test performance vs float function - is there even a reason to do an all-int function?
    p = v * (255 - s) / 255;
    q = v * (255 - (s * remainder) / 43) / 255;
    t = v * (255 - (s * (43 - remainder)) / 43) / 255;

    if (region == 0)
        return makeARGB(alpha, v, t, p);
    else if (region == 1)
        return makeARGB(alpha, q, v, p);
    else if (region == 2)
        return makeARGB(alpha, p, v, t);
    else if (region == 3)
        return makeARGB(alpha, p, q, v);
    else if (region == 4)
        return makeARGB(alpha, t, p, v);
    else
        return makeARGB(alpha, v, p, q);
}

// Simple colour map function
void showColourMap()
{
    for (int x = 0; x < 15; x++)
        for (int y = 0; y < 15; y++)
            blendPixel(makeARGBfromAHSV(255, 17 * x, 255, 255 - 17 * y), x, y);
}


void initialise()
{
    clearDisplay();
    showColourMap();
}
